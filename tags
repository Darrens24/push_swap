!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BLUE	Libft/Makefile	/^BLUE='\\033[0;34m'$/;"	m
BUFFER_SIZE	Libft/get_next_line.h	/^#  define BUFFER_SIZE /;"	d
CC	Libft/Makefile	/^CC = gcc$/;"	m
CC	Makefile	/^CC = gcc$/;"	m
CFLAGS	Libft/Makefile	/^CFLAGS = -Wall -Wextra -Werror$/;"	m
CFLAGS	Makefile	/^CFLAGS = -Wall -Wextra -Werror$/;"	m
CYAN	Libft/Makefile	/^CYAN='\\033[0;36m'$/;"	m
DARKGRAY	Libft/Makefile	/^DARKGRAY='\\033[1;30m'$/;"	m
DECIMAL	Libft/ft_printf.h	/^# define DECIMAL /;"	d
FT_PRINTF_H	Libft/ft_printf.h	/^# define FT_PRINTF_H$/;"	d
GET_NEXT_LINE_H	Libft/get_next_line.h	/^# define GET_NEXT_LINE_H$/;"	d
GREEN	Libft/Makefile	/^GREEN='\\033[0;32m'$/;"	m
HEXALOW	Libft/ft_printf.h	/^# define HEXALOW /;"	d
HEXAUP	Libft/ft_printf.h	/^# define HEXAUP /;"	d
LIBFT_H	Libft/libft.h	/^# define LIBFT_H$/;"	d
LIGHTBLUE	Libft/Makefile	/^LIGHTBLUE='\\033[1;34m'$/;"	m
LIGHTCYAN	Libft/Makefile	/^LIGHTCYAN='\\033[1;36m'$/;"	m
LIGHTGRAY	Libft/Makefile	/^LIGHTGRAY='\\033[0;37m'$/;"	m
LIGHTGREEN	Libft/Makefile	/^LIGHTGREEN='\\033[1;32m'$/;"	m
LIGHTPURPLE	Libft/Makefile	/^LIGHTPURPLE='\\033[1;35m'$/;"	m
LIGHTRED	Libft/Makefile	/^LIGHTRED='\\033[1;31m'$/;"	m
NAME	Libft/Makefile	/^NAME = libft.a$/;"	m
NAME	Makefile	/^NAME = push_swap$/;"	m
NAMEBONUS	Makefile	/^NAMEBONUS = bonus\/checker$/;"	m
NOCOLOR	Libft/Makefile	/^NOCOLOR='\\033[0m'$/;"	m
OBJ	Libft/Makefile	/^OBJ = $(SRC:.c=.o)$/;"	m
OBJ	Makefile	/^OBJ = $(SRC:.c=.o)$/;"	m
OBJBONUS	Makefile	/^OBJBONUS = $(SRCBONUS:.c=.o)$/;"	m
ORANGE	Libft/Makefile	/^ORANGE='\\033[0;33m'$/;"	m
PURPLE	Libft/Makefile	/^PURPLE='\\033[0;35m'$/;"	m
PUSH_SWAP_H	push_swap.h	/^# define PUSH_SWAP_H$/;"	d
RED	Libft/Makefile	/^RED='\\033[0;31m'$/;"	m
SRC	Libft/Makefile	/^SRC = ft_atoi.c \\$/;"	m
SRC	Makefile	/^SRC = utils.c \\$/;"	m
SRCBONUS	Makefile	/^SRCBONUS = bonus\/my_checker.c \\$/;"	m
WHITE	Libft/Makefile	/^WHITE='\\033[1;37m'$/;"	m
YELLOW	Libft/Makefile	/^YELLOW='\\033[1;33m'$/;"	m
a	push_swap.h	/^	t_chained	*a;$/;"	m	struct:s_data
absolute	utils2.c	/^int	absolute(int data)$/;"	f
already	Libft/ft_putnbr_base_fd.c	/^static int	already(char *str)$/;"	f	file:
already	Libft/ft_sizebase_fd.c	/^static int	already(char *str)$/;"	f	file:
apply_stdin_cmds	bonus/my_checker.c	/^void	apply_stdin_cmds(t_data *push_swap, t_strchained *input)$/;"	f
b	push_swap.h	/^	t_chained	*b;$/;"	m	struct:s_data
big	push_swap.h	/^	int				big;$/;"	m	struct:s_chained
biggest_from_bot	utils2.c	/^int	biggest_from_bot(t_chained *list)$/;"	f
biggest_from_top	utils2.c	/^int	biggest_from_top(t_chained *list)$/;"	f
biggest_or_second_from_bot	bools.c	/^int	biggest_or_second_from_bot(t_chained *list)$/;"	f
biggest_or_second_from_top	bools.c	/^int	biggest_or_second_from_top(t_chained *list)$/;"	f
bot_is_optimal	sorting_utils2.c	/^static void	bot_is_optimal(t_data *data)$/;"	f	file:
check_double	errors.c	/^int	check_double(int *int_array, int ac)$/;"	f
check_errors	errors.c	/^int	check_errors(char **av, int ac)$/;"	f
check_good_len	errors_utils.c	/^int	check_good_len(char **av, int i, int j)$/;"	f
check_is_digit	errors.c	/^int	check_is_digit(char **av)$/;"	f
check_is_int	errors.c	/^int	check_is_int(int ac, char **av)$/;"	f
cleanstock	Libft/get_next_line.c	/^char	*cleanstock(char *stock)$/;"	f
compare_with_valids	bonus/my_checker.c	/^int	compare_with_valids(char *str)$/;"	f
content	Libft/libft.h	/^	void			*content;$/;"	m	struct:s_list
copystock	Libft/get_next_line.c	/^char	*copystock(char *stock, char *buffer)$/;"	f
count_second_big	push_swap.h	/^	int			count_second_big;$/;"	m	struct:s_data
count_set	Libft/ft_strtrim.c	/^int	count_set(char const *s1, char const *set)$/;"	f
data	push_swap.h	/^	int				data;$/;"	m	struct:s_node
duplicate	Libft/ft_split.c	/^static char	*duplicate(char *src, int start, int end)$/;"	f	file:
duplicate	Libft/ft_split_slash.c	/^static char	*duplicate(char *src, int start, int end)$/;"	f	file:
end	push_swap.h	/^	struct s_node	*end;$/;"	m	struct:s_chained	typeref:struct:s_chained::s_node
end	push_swap.h	/^	struct s_strnode	*end;$/;"	m	struct:s_strchained	typeref:struct:s_strchained::s_strnode
execute_sorting_command	bonus/my_checker.c	/^void	execute_sorting_command(t_data *push_swap, char *str)$/;"	f
fill_back_a	back_in_a.c	/^void	fill_back_a(t_data *data)$/;"	f
freetab	Libft/ft_split.c	/^static void	freetab(char **recipe, int i)$/;"	f	file:
freetab	Libft/ft_split_slash.c	/^static void	freetab(char **recipe, int i)$/;"	f	file:
ft_atoi	Libft/ft_atoi.c	/^int	ft_atoi(const char *str)$/;"	f
ft_bzero	Libft/ft_bzero.c	/^void	ft_bzero(void *s, size_t n)$/;"	f
ft_bzzero	Libft/get_next_line_utils.c	/^void	ft_bzzero(void *s, size_t n)$/;"	f
ft_callloc	Libft/get_next_line_utils.c	/^void	*ft_callloc(size_t count, size_t size)$/;"	f
ft_calloc	Libft/ft_calloc.c	/^void	*ft_calloc(size_t count, size_t size)$/;"	f
ft_intputchar_fd	Libft/ft_intputchar_fd.c	/^int	ft_intputchar_fd(char c, int fd)$/;"	f
ft_intputstr_fd	Libft/ft_intputstr_fd.c	/^int	ft_intputstr_fd(char *s, int fd)$/;"	f
ft_intstrlen	Libft/get_next_line_utils.c	/^int	ft_intstrlen(char *str)$/;"	f
ft_isalnum	Libft/ft_isalnum.c	/^int	ft_isalnum(int c)$/;"	f
ft_isalpha	Libft/ft_isalpha.c	/^int	ft_isalpha(int c)$/;"	f
ft_isascii	Libft/ft_isascii.c	/^int	ft_isascii(int c)$/;"	f
ft_isdigit	Libft/ft_isdigit.c	/^int	ft_isdigit(int c)$/;"	f
ft_isprint	Libft/ft_isprint.c	/^int	ft_isprint(int c)$/;"	f
ft_itoa	Libft/ft_itoa.c	/^char	*ft_itoa(int n)$/;"	f
ft_join_nextline	Libft/get_next_line_utils.c	/^char	*ft_join_nextline(char *s1, char *s2)$/;"	f
ft_lstadd_back	Libft/ft_lstadd_back.c	/^void	ft_lstadd_back(t_list **lst, t_list *new)$/;"	f
ft_lstadd_front	Libft/ft_lstadd_front.c	/^void	ft_lstadd_front(t_list **lst, t_list *new)$/;"	f
ft_lstclear	Libft/ft_lstclear.c	/^void	ft_lstclear(t_list **lst, void (*del)(void *))$/;"	f
ft_lstdelone	Libft/ft_lstdelone.c	/^void	ft_lstdelone(t_list *lst, void (*del)(void *))$/;"	f
ft_lstiter	Libft/ft_lstiter.c	/^void	ft_lstiter(t_list *lst, void (*f)(void *))$/;"	f
ft_lstlast	Libft/ft_lstlast.c	/^t_list	*ft_lstlast(t_list *lst)$/;"	f
ft_lstmap	Libft/ft_lstmap.c	/^t_list	*ft_lstmap(t_list *lst, void *(*f)(void *), void (*del)(void *))$/;"	f
ft_lstnew	Libft/ft_lstnew.c	/^t_list	*ft_lstnew(void *content)$/;"	f
ft_lstsize	Libft/ft_lstsize.c	/^int	ft_lstsize(t_list *lst)$/;"	f
ft_memchr	Libft/ft_memchr.c	/^void	*ft_memchr(const void *memblock, int searched, size_t size)$/;"	f
ft_memcmp	Libft/ft_memcmp.c	/^int	ft_memcmp(const void *ptr1, const void *ptr2, size_t size)$/;"	f
ft_memcpy	Libft/ft_memcpy.c	/^void	*ft_memcpy(void *dest, const void *src, size_t size)$/;"	f
ft_memmove	Libft/ft_memmove.c	/^void	*ft_memmove(void *dest, const void *src, size_t size)$/;"	f
ft_memset	Libft/ft_memset.c	/^void	*ft_memset(void *ptr, int value, size_t count)$/;"	f
ft_printf	Libft/ft_printf.c	/^int	ft_printf(const char *param, ...)$/;"	f
ft_putarg	Libft/ft_printf.c	/^static int	ft_putarg(char c, va_list ap)$/;"	f	file:
ft_putchar_fd	Libft/ft_putchar_fd.c	/^void	ft_putchar_fd(char c, int fd)$/;"	f
ft_putendl_fd	Libft/ft_putendl_fd.c	/^void	ft_putendl_fd(char *s, int fd)$/;"	f
ft_putnbr_base_fd	Libft/ft_putnbr_base_fd.c	/^int	ft_putnbr_base_fd(long nbr, char *base, int fd)$/;"	f
ft_putnbr_fd	Libft/ft_putnbr_fd.c	/^void	ft_putnbr_fd(int n, int fd)$/;"	f
ft_putstr_fd	Libft/ft_putstr_fd.c	/^void	ft_putstr_fd(char *s, int fd)$/;"	f
ft_sizebase_fd	Libft/ft_sizebase_fd.c	/^int	ft_sizebase_fd(size_t nbr, char *base, int fd)$/;"	f
ft_split	Libft/ft_split.c	/^char	**ft_split(char const *s, char c)$/;"	f
ft_split_slash	Libft/ft_split_slash.c	/^char	**ft_split_slash(char const *s, char c)$/;"	f
ft_strchr	Libft/ft_strchr.c	/^char	*ft_strchr(const char *str, int searched)$/;"	f
ft_strdup	Libft/ft_strdup.c	/^char	*ft_strdup(const char *str)$/;"	f
ft_strisdigit	Libft/ft_strisdigit.c	/^int	ft_strisdigit(char *str)$/;"	f
ft_striteri	Libft/ft_striteri.c	/^void	ft_striteri(char *s, void (*f)(unsigned int, char *))$/;"	f
ft_strjoin	Libft/ft_strjoin.c	/^char	*ft_strjoin(char const *s1, char const *s2)$/;"	f
ft_strlcat	Libft/ft_strlcat.c	/^size_t	ft_strlcat(char *dest, const char *src, size_t size)$/;"	f
ft_strlcpy	Libft/ft_strlcpy.c	/^size_t	ft_strlcpy(char *dest, const char *src, size_t size)$/;"	f
ft_strlen	Libft/ft_strlen.c	/^size_t	ft_strlen(const char *str)$/;"	f
ft_strmapi	Libft/ft_strmapi.c	/^char	*ft_strmapi(char const *s, char (*f)(unsigned int, char))$/;"	f
ft_strncmp	Libft/ft_strncmp.c	/^int	ft_strncmp(const char *str1, const char *str2, size_t length)$/;"	f
ft_strnstr	Libft/ft_strnstr.c	/^char	*ft_strnstr(const char *big, const char *little, size_t len)$/;"	f
ft_strrchr	Libft/ft_strrchr.c	/^char	*ft_strrchr(const char *str, int searched)$/;"	f
ft_strtrim	Libft/ft_strtrim.c	/^char	*ft_strtrim(char const *s1, char const *set)$/;"	f
ft_substr	Libft/ft_substr.c	/^char	*ft_substr(char const *s, unsigned int start, size_t len)$/;"	f
ft_tolower	Libft/ft_tolower.c	/^int	ft_tolower(int c)$/;"	f
ft_toupper	Libft/ft_toupper.c	/^int	ft_toupper(int c)$/;"	f
get_args_array_check_double	errors.c	/^int	get_args_array_check_double(int ac, char **av)$/;"	f
get_data	utils.c	/^int	get_data(t_data *data, int ac, char **av)$/;"	f
get_medium	sorting_utils.c	/^int	get_medium(t_chained *list)$/;"	f
get_next_line	Libft/get_next_line.c	/^char	*get_next_line(int fd)$/;"	f
get_size	Libft/ft_itoa.c	/^static int	get_size(long n)$/;"	f	file:
get_stdin_cmds	bonus/my_checker.c	/^t_strchained	*get_stdin_cmds(void)$/;"	f
get_step_median	sorting.c	/^int	get_step_median(int low, int high)$/;"	f
give_line	Libft/get_next_line.c	/^char	*give_line(char *stock, char c)$/;"	f
go_to_end	lists.c	/^t_node	*go_to_end(t_chained *list)$/;"	f
has_data_in_step	bools.c	/^int	has_data_in_step(t_chained *list)$/;"	f
high_data	sorting.c	/^t_chained	*high_data(t_data *data)$/;"	f
input_is_correct	bonus/bonus_utils.c	/^int	input_is_correct(t_strchained *input)$/;"	f
is_biggest	sorting_utils.c	/^int	is_biggest(t_chained *list)$/;"	f
is_empty	utils.c	/^int	is_empty(t_chained *list)$/;"	f
is_in_step	bools.c	/^int	is_in_step(int data, t_chained *list)$/;"	f
is_lowest	sorting_utils.c	/^int	is_lowest(t_chained *list)$/;"	f
is_second_biggest	bools.c	/^int	is_second_biggest(t_chained *list)$/;"	f
is_set	Libft/ft_strtrim.c	/^static int	is_set(char c, char const *set)$/;"	f	file:
is_sorted	utils.c	/^int	is_sorted(t_chained *list)$/;"	f
itoa_is_neg	Libft/ft_itoa.c	/^static char	*itoa_is_neg(long n)$/;"	f	file:
itoa_is_pos	Libft/ft_itoa.c	/^static char	*itoa_is_pos(long n)$/;"	f	file:
launch_sorting_algo	main.c	/^static void	launch_sorting_algo(int ac, t_data *push_swap)$/;"	f	file:
let_3_in_a	sorting_utils2.c	/^void	let_3_in_a(t_data *data)$/;"	f
line_in_stock	Libft/get_next_line_utils.c	/^int	line_in_stock(char *str)$/;"	f
list_has_sup_med	utils.c	/^int	list_has_sup_med(t_data *data, t_chained *list)$/;"	f
look_for_big_or_second	back_in_a.c	/^static void	look_for_big_or_second(t_data *data, int *count)$/;"	f	file:
look_from_bot	sorting_utils.c	/^int	look_from_bot(t_chained *list)$/;"	f
look_from_top	sorting_utils.c	/^int	look_from_top(t_chained *list)$/;"	f
low	push_swap.h	/^	int				low;$/;"	m	struct:s_chained
low_data	sorting.c	/^t_chained	*low_data(t_data *data)$/;"	f
lowest_from_bot	utils2.c	/^int	lowest_from_bot(t_chained *list)$/;"	f
lowest_from_top	utils2.c	/^int	lowest_from_top(t_chained *list)$/;"	f
main	bonus/my_checker.c	/^int	main(int ac, char **av)$/;"	f
main	main.c	/^int	main(int ac, char **av)$/;"	f
medium	push_swap.h	/^	int				medium;$/;"	m	struct:s_chained
medium	push_swap.h	/^	int			medium;$/;"	m	struct:s_data
medium_data	sorting.c	/^t_chained	*medium_data(t_data *data)$/;"	f
name	push_swap.h	/^	char			name;$/;"	m	struct:s_chained
nb_elem	push_swap.h	/^	int					nb_elem;$/;"	m	struct:s_strchained
nb_elem	push_swap.h	/^	int				nb_elem;$/;"	m	struct:s_chained
nb_elem	push_swap.h	/^	int			nb_elem;$/;"	m	struct:s_data
new_back_node	lists.c	/^t_chained	*new_back_node(t_chained *list, int data)$/;"	f
new_back_node_str	bonus/bonus_utils.c	/^t_strchained	*new_back_node_str(t_strchained *list, char *str)$/;"	f
new_front_node	lists.c	/^t_chained	*new_front_node(t_chained *list, int data)$/;"	f
next	Libft/libft.h	/^	struct s_list	*next;$/;"	m	struct:s_list	typeref:struct:s_list::s_list
next	push_swap.h	/^	struct s_node	*next;$/;"	m	struct:s_node	typeref:struct:s_node::s_node
next	push_swap.h	/^	struct s_strnode	*next;$/;"	m	struct:s_strnode	typeref:struct:s_strnode::s_strnode
next_step	push_swap.h	/^	int				next_step;$/;"	m	struct:s_chained
null_list	utils.c	/^t_chained	*null_list(void)$/;"	f
only_look_top_big	back_in_a.c	/^static void	only_look_top_big(t_data *data, int *count)$/;"	f	file:
plusminus	Libft/ft_putnbr_base_fd.c	/^static int	plusminus(char *str)$/;"	f	file:
plusminus	Libft/ft_sizebase_fd.c	/^static int	plusminus(char *str)$/;"	f	file:
prev	push_swap.h	/^	struct s_node	*prev;$/;"	m	struct:s_node	typeref:struct:s_node::s_node
prev	push_swap.h	/^	struct s_strnode	*prev;$/;"	m	struct:s_strnode	typeref:struct:s_strnode::s_strnode
push	instructions1.c	/^t_chained	*push(t_chained *from, t_chained *to)$/;"	f
push_without_print	bonus/instructions_bonus.c	/^t_chained	*push_without_print(t_chained *from, t_chained *to)$/;"	f
readbuff_copystock	Libft/get_next_line.c	/^char	*readbuff_copystock(int fd, char *stock)$/;"	f
remove_back_node	lists.c	/^t_chained	*remove_back_node(t_chained *list)$/;"	f
remove_back_node_str	bonus/bonus_utils.c	/^t_strchained	*remove_back_node_str(t_strchained *list)$/;"	f
remove_front_node	lists.c	/^t_chained	*remove_front_node(t_chained *list)$/;"	f
reverse	instructions2.c	/^t_chained	*reverse(t_chained *list)$/;"	f
reverse_both	instructions2.c	/^t_chained	*reverse_both(t_chained *list1, t_chained *list2)$/;"	f
reverse_both_printless	bonus/instructions_bonus.c	/^t_chained	*reverse_both_printless(t_chained *list1, t_chained *list2)$/;"	f
reverse_from_bot	back_in_a.c	/^static void	reverse_from_bot(t_data *data, int *count)$/;"	f	file:
reverse_without_print	bonus/instructions_bonus.c	/^t_chained	*reverse_without_print(t_chained *list)$/;"	f
rotate	instructions2.c	/^t_chained	*rotate(t_chained *list)$/;"	f
rotate_both	instructions2.c	/^t_chained	*rotate_both(t_chained *list1, t_chained *list2)$/;"	f
rotate_both_printless	bonus/instructions_bonus2.c	/^t_chained	*rotate_both_printless(t_chained *list1, t_chained *list2)$/;"	f
rotate_from_top	back_in_a.c	/^static void	rotate_from_top(t_data *data, int *count)$/;"	f	file:
rotate_without_print	bonus/instructions_bonus2.c	/^t_chained	*rotate_without_print(t_chained *list)$/;"	f
s_chained	push_swap.h	/^typedef struct s_chained$/;"	s
s_data	push_swap.h	/^typedef struct s_data$/;"	s
s_list	Libft/libft.h	/^typedef struct s_list$/;"	s
s_node	push_swap.h	/^typedef struct s_node$/;"	s
s_strchained	push_swap.h	/^typedef struct s_strchained$/;"	s
s_strnode	push_swap.h	/^typedef struct s_strnode$/;"	s
splitcount	Libft/ft_split.c	/^static int	splitcount(const char *str, char c)$/;"	f	file:
splitcount	Libft/ft_split_slash.c	/^static int	splitcount(const char *str, char c)$/;"	f	file:
splitter	Libft/ft_split.c	/^char	**splitter(char const *s, char c, char **recipe)$/;"	f
splitter	Libft/ft_split_slash.c	/^static char	**splitter(char const *s, char c, char **recipe)$/;"	f	file:
start	push_swap.h	/^	struct s_node	*start;$/;"	m	struct:s_chained	typeref:struct:s_chained::s_node
start	push_swap.h	/^	struct s_strnode	*start;$/;"	m	struct:s_strchained	typeref:struct:s_strchained::s_strnode
step	push_swap.h	/^	int				step;$/;"	m	struct:s_chained
step_median	push_swap.h	/^	int			step_median;$/;"	m	struct:s_data
stepfill_b	sorting_utils2.c	/^void	stepfill_b(t_data *data)$/;"	f
str	push_swap.h	/^	char				*str;$/;"	m	struct:s_strnode
swap_both	instructions1.c	/^t_chained	*swap_both(t_chained *list1, t_chained *list2)$/;"	f
swap_both_without_print	bonus/instructions_bonus.c	/^t_chained	*swap_both_without_print(t_chained *list1, t_chained *list2)$/;"	f
swap_top	instructions1.c	/^t_chained	*swap_top(t_chained *list)$/;"	f
swap_without_print	instructions1.c	/^void	swap_without_print(t_chained *list1)$/;"	f
t_chained	push_swap.h	/^}				t_chained;$/;"	t	typeref:struct:s_chained
t_data	push_swap.h	/^}				t_data;$/;"	t	typeref:struct:s_data
t_list	Libft/libft.h	/^}					t_list;$/;"	t	typeref:struct:s_list
t_node	push_swap.h	/^}				t_node;$/;"	t	typeref:struct:s_node
t_strchained	push_swap.h	/^}				t_strchained;$/;"	t	typeref:struct:s_strchained
t_strnode	push_swap.h	/^}				t_strnode;$/;"	t	typeref:struct:s_strnode
top_is_optimal	sorting_utils2.c	/^static void	top_is_optimal(t_data *data)$/;"	f	file:
trim_zeros	errors_utils.c	/^char	*trim_zeros(char *str)$/;"	f
very_low_data	sorting.c	/^t_chained	*very_low_data(t_data *data)$/;"	f
